<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:sec="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- UserDatailsServiceImpl을 scan하기 위한 설정 -->	
	<context:component-scan base-package="com.callor.sec.service.author" />
	
	<!-- value="4" 4번의 암호화를 거쳐라 값이 커지면 암호화를 더 시키지만 그만큼 더 느려짐 -->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg index="0" value="4"/>
	</bean>
		
		<!--auto-config="true": 자동으로 설정해줘라 
		disabled="false": csrf를 보이지 않게 하겠다. true로 하면 보안상의 이슈가 있음 -->
		<!--  permitAll:그냥 통과시켜라   isAuthenticated(): 인증이 되었는지 확인해라 인증되어만 접속 가능-->
		<!--  form-login: 만약 누군가 홈페이지를 요청했는데 로그인이 안되어있으면 
		sec가 제공하는 로그인창을 띄워라-->
		<!--{noop}: 패스워드를 암호화하지 말아라: 암호화하면 로그인이 안됨  -->
		<!-- form:login 속성중에 login-processing-url 이 속성은
		반드시 /user/login으로 설정해야한다.
		실제 from action은 ${rootPath/user/login} 형식으로 지정이 되지만
		임의로 from tag에 action을 지정하는 것과는 다르게 동작을 한다.
		login-processing-url에 설정된 /user/login 주소는 spring security가
		중간에 가로채기를 하여 security login 절차가 수행된다
		대신 controller에 /user/login POST method는 없어야한다.-->
		
		<!-- invalidate-session="true" : 로그아웃이 되면 session을 사용하지 못하게 하라 
		logout-success-url="/" : 로그아웃시 이동
		authentication-failure-handler-ref : authorFailurHandler class와 연동
		delete-cookies="JSESSIONID" : 쿠키가 남아 있으니 쿠키도 삭제해라
		-->
	<sec:http auto-config="true" use-expressions="true">
		<sec:csrf disabled="false"/>
		<sec:intercept-url pattern="/static/**" access="permitAll"/>
		<sec:intercept-url pattern="/user/login" access="permitAll"/>
		<sec:intercept-url pattern="/user/join" access="permitAll"/>
		<sec:intercept-url pattern="/guest" access="permitAll"/>
		<sec:intercept-url pattern="/" access="permitAll"/>
		<sec:intercept-url pattern="/**" access="isAuthenticated()"/>
		
		<sec:form-login login-page="/user/login?error=LOGIN_NEED"
						login-processing-url="/user/login"
						authentication-failure-handler-ref="authorFailurHandler"
						username-parameter="username"
						password-parameter="password"/>
			
		<sec:logout invalidate-session="true" logout-success-url="/"
		delete-cookies="JSESSIONID"/>
	</sec:http>
	
	<!-- 실제로 로그인을 실행하기 위한 bean 등록 -->
	<sec:authentication-manager>
		<sec:authentication-provider ref="authenticationProvider"/>
	</sec:authentication-manager>
	
	<!--임시 사용자 등록-->
	<!-- <sec:authentication-manager>
		<sec:authentication-provider>
			<sec:user-service>
				<sec:user name="GOGO" password="{noop}!Korea8080" authorities="ROLE_ADMIN"/>
			</sec:user-service>
		</sec:authentication-provider>	
	</sec:authentication-manager> -->
	

</beans>
